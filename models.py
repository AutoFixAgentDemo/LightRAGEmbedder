"""
These models are sychronized with the models in the CVEFIXFormat project."""

from pydantic import BaseModel, Field
from typing import List, Any
from bson.objectid import ObjectId
from pydantic import BaseModel, Field


class FunctionInfo(BaseModel):
    function_name: str = Field(
        default="", description="The name of the function")
    general_purpose: str = Field(
        default="", description="A brief description of the function's purpose")
    implementation_details: List[str] = Field(
        default_factory=list,
        description="Detailed information about the function's implementation"
    )


class FunctionInfoList(BaseModel):
    functional_desc: List[FunctionInfo] = Field(
        default_factory=list,
        description="A list of FunctionInfo objects representing various functions"
    )


class InitSecInfo(BaseModel):
    cve_id: str = Field(default="", description="CVE number")  # CVE 编号
    description: str = Field(
        default="",
        description="The detailed description of the CVE"
    )  # 漏洞的详细描述
    vulnerability_cause_details: str = Field(
        default="",
        description="Detailed explanation of why the vulnerability exists"
    )  # 漏洞存在的详细解释
    patch_details: str = Field(
        default="",
        description="Summary of changes made in the patch to fix the vulnerability"
    )

class SemanticDesc(BaseModel):
    funcs_desc: FunctionInfoList = Field(
        # From the functional extraction
        default_factory=FunctionInfoList,
        description="Info extracted from functional extraction",
    )
    # From the security extraction
    sec_desc: InitSecInfo = Field(
        default_factory=InitSecInfo, description="Info extracted from sec extraction"
    )



class Meta(BaseModel):
    """
    Base model for metadata structures. Provides common utilities for derived metadata models.
    """

    def has_missing_fields(self) -> bool:
        """
        Check if any field in the model or nested models is None, empty, or has default value.
        """
        for field_name, field_info in self.model_fields.items():
            value = getattr(self, field_name)

            # Check for None, empty string, or empty list
            if value in (None, "", []) or (isinstance(value, Meta) and value.has_missing_fields()):
                return True

        return False


class PatchMeta(Meta):
    """
    Metadata model for patch details associated with a CVE fix.
    """
    commit_sha: str = Field(
        default="", description="The SHA hash of the commit.")
    commit_message: str = Field(
        default="", description="The message associated with the commit.")
    repo: str = Field(
        default="",
        description="The repository to which the commit belongs, e.g., 'torvalds/linux'."
    )
    vulnerable_codes_id: List[str] = Field(
        default_factory=list,
        description="A list of IDs for vulnerable code files stored in GridFS."
    )
    patched_code_id: List[str] = Field(
        default_factory=list,
        description="A list of IDs for patched code files stored in GridFS."
    )
    diff_id: List[str] = Field(
        default_factory=list,
        description="A list of IDs for diff files stored in GridFS."
    )

class CVEMeta(Meta):
    """
    Metadata model for a CVE (Common Vulnerabilities and Exposures) record.
    """
    cve_number: str = Field(
        default="", description="The unique identifier for the CVE.")
    title: str = Field(
        default="", description="A brief title or name for the CVE.")
    description: str = Field(
        default="", description="A detailed description of the CVE.")
    weaknesses: List[str] = Field(
        default_factory=list,
        description="A list of associated weaknesses, e.g., CWE identifiers."
    )
    patch_meta: PatchMeta = Field(
        default_factory=PatchMeta,
        description="Patch metadata related to the CVE fix."
    )
class CVEDescription(BaseModel):
    """
    The integrated description of a CVE and will be saved in the database.
    """

    cve_meta: CVEMeta = Field(
        default_factory=CVEMeta, description="Metadata parsed from CVE desc file"
    )
    desc: SemanticDesc = Field(
        default_factory=SemanticDesc, description="Intergrated info generated by LLM"
    )
    
class RAGModel(BaseModel):
    """
    Insert to the RAG model
    """
    cve_number: str = Field(
        default="", description="The unique identifier for the CVE.")
    title: str = Field(
        default="", description="A brief title or name for the CVE.")
    desc:SemanticDesc= Field(
        default_factory=SemanticDesc, description="Intergrated info generated by LLM"
    )
    